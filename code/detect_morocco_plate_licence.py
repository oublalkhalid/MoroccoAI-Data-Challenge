# -*- coding: utf-8 -*-
"""Detect Morocco Plate Licence (Part 1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbowHlIcBxS-By8B6YWUN9Q9Q3qZ1FsS

# DETECT MOROCCO PLATES LICENSES (Deep Neural Network Part I)

* Our goal here is to train a Yolo v3 and a poly Yolo in its tiny version, I have already trained this one but the performance is not appreciated due to the weak image with annotation.

* I specify here, that I am interested in the whole plate the recognition of the numbers or the alphabet is not treated in this level. In addition, we will save the weights of our network at the output of this notebook. Also we will point out that a large part of the data has been generated to solve the problem of Imbalanced data and that a log transformation has been done to answer the issue of Imbalanced data.

> **Note:**
A large part of this work was done under an AI station with an RTX Geforce 3090 card. However, to facilitate the visualization of this approach, we made this notebook under Colab Pro (you can also run this code under Kaggle, or airflow).

# **Getting started and uploading data and creating a sym link**

Please provide what you are using as a machine_run to upload the files to your notebook.
"""

# Commented out IPython magic to ensure Python compatibility.
machine_run="Colab" #local # kaggle

if machine_run=="Colab":
#   %cd ..
  from google.colab import drive
  drive.mount('/content/gdrive')
  !ln -s /content/gdrive/My\ Drive/ /mydrive
  !ls /mydrive

if  machine_run=="kaggle":
    pass

if  machine_run=="local":
 path="" # Please upload our main folder containing all necessary data (moroccoAI/data/..)

"""#**Cloning and Building Darknet**
Here I use only the Darknet library to train the YOLOv3 model with the custom data we obtained in part 0. Please downloading the library from pjreddie/darknet's repository, and adjusting Makefile to enable OPENCV and GPU for darknet and then building the darknet.
"""

# cloning darknet repo
!git clone https://github.com/pjreddie/darknet.git

# Commented out IPython magic to ensure Python compatibility.
# changing the makefile to have GPU and OpneCv enabled
# %cd darknet/
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile

#Uninstall the current CUDA version
!apt-get --purge remove cuda nvidia* libnvidia-*
!dpkg -l | grep cuda- | awk '{print $2}' | xargs -n1 dpkg --purge
!apt-get remove cuda-*
!apt autoremove
!apt-get update

#Download CUDA 10.0
!wget --no-clobber https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
#install CUDA kit dpkg
!dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
!sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
!apt-get update
!apt-get install cuda-10-0

# Making sure to use GPU with CUDA
!/usr/local/cuda/bin/nvcc --version

# Building the darknet
!make

"""### **Create & Copy MoroccoAI-challenge-OUBLAL to your Colab env**

"""

# This has all the images data that we use to train and test
!cp /mydrive/MoroccoAI-challenge-OUBLAL-2021/datasets/dataset_plates.zip ../

"""### **Extracting zip to Colab VM under darket/custom folder**"""

!unzip ../dataset.zip -d ../darknet/custom

"""# **Train the YOLOv3 model using the Darknet**

Darknet provides YOLOv3 model support that we used to train with our custom data. We are using `darknet53.conv.74` default weights to begin our training (transfer learning), and a configuration file `yolov3_plates.cfg` that supports out neural network layers. Upon trianing the model, we will have our custom weights that will be used to predict the license plates. 

Coping Default weights and custom config for Object detection from GDrive

### Coping Default weights and custom config for Object detection from GDrive
"""

plates_yolo_config = "/content/gdrive/MyDrive/MoroccoAI-challenge-OUBLAL-2021/models/yolov3-license-plates.cfg"
plates_yolo_weights = "/content/gdrive/MyDrive/MoroccoAI-challenge-OUBLAL-2021/models/yolov3_plates_final.weights"
plates_classes = ['Plate']
chars_classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a','b','d', 'h', 'j', 'm', 'p', 'waw', 'ww']

chars_yolo_config = "/content/gdrive/MyDrive/MoroccoAI-challenge-OUBLAL-2021/models/yolov3_character.cfg"
chars_yolo_weights = "/content/gdrive/MyDrive/MoroccoAI-challenge-OUBLAL-2021/models/yolov3_chars_final.weights"

!cp /content/gdrive/MyDrive/MoroccoAI-challenge-OUBLAL-2021/models/yolov3-license-plates.cfg ../darknet/

!wget https://pjreddie.com/media/files/darknet53.conv.74

!wget https://pjreddie.com/media/files/darknet53.conv.74

!cp /mydrive/MoroccoAI-challenge-OUBLAL-2021/train.txt  ../darknet/custom/dataset/
!cp /mydrive/MoroccoAI-challenge-OUBLAL-2021/test.txt  ../darknet/custom/dataset/

!cp /mydrive/MoroccoAI-challenge-OUBLAL-2021/yolov3-license-plates.cfg /content/darknet/cfg

"""# **Training the YOLOv3 model with CustomData**"""

pwd

!./darknet detector train custom/dataset/licence.data yolov3-license-plates.cfg darknet53.conv.74 -dont_show

"""# **Image Utils**"""

import cv2
import matplotlib.pyplot as plt
from google.colab import files

def upload():
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

def download(path):
  from google.colab import files
  files.download(path)

# def dipslayImage(path):
#   %matplotlib inline
#   image = cv2.imread(path)
#   height, width = image.shape[:2]
#   resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)
#   fig = plt.gcf()
#   fig.set_size_inches(18, 10)
#   plt.axis("off")
#   plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
#   plt.show()

"""Upload Image"""

# Commented out IPython magic to ensure Python compatibility.
# Uploading image to root directory
# %cd ../darknet
upload()

"""Predicted Image"""

!cd .../
!ls

# Commented out IPython magic to ensure Python compatibility.
# Prediction
from IPython.display import Image
# %cd ../darknet
!./darknet detector test custom/dataset/license_plate.data yolov3_plates.cfg custom/models/yolov3_plates_final.weights m3_0.jpg
Image('predictions.jpg')